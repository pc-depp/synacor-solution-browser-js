{
  "version": 3,
  "sources": ["../console.js", "../io.js", "../memory.js", "../stack.js", "../opcodes.js", "../vm.js", "../app.js"],
  "sourcesContent": ["class Console {\n    constructor(el) {\n        this.lines = new Array(25)\n        this.inputBuf = ''\n        this.inputElem = null\n        for (let y=0; y<25; y++) {\n            this.lines[y] = []\n        }\n        this.build(el)\n    }\n    build(el) {\n        el.setAttribute(\n            'style',\n            'display: inline-block; font-family: monospace; font-size: 16px;'\n            + 'background-color: #ccc;'\n        )\n        for (let y=0; y<25; y++) {\n            const row = document.createElement('div')\n            for (let x=0; x<80; x++) {\n                const col = document.createElement('div')\n                col.setAttribute(\n                    'style',\n                    `display: inline-block; width: 10px; height: 24px;`\n                    + 'text-align: center; vertical-align: middle;'\n                )\n                col.setAttribute('data-x', x)\n                col.setAttribute('data-y', y)\n                row.appendChild(col)\n            }\n            el.appendChild(row)\n        }\n        const inp = document.createElement('input')\n        inp.setAttribute('type', 'text')\n        inp.setAttribute('style', 'width: calc(100% - 5px); font-family: monospace; font-size: 16px; margin: 0; border: 0; padding-left: 3px; background-color: #ace')\n        inp.setAttribute('autofocus', '')\n        inp.setAttribute('disabled', '')\n        inp.addEventListener('keyup', this._keyUpHandler.bind(this))\n        el.appendChild(inp)\n        this.inputElem = inp\n    }\n\n    _keyUpHandler(ev) {\n        if (ev.code === 'Enter') {\n            this.inputBuf = ev.target.value + String.fromCharCode(10)\n        }\n    }\n\n    setExpectingInput(v) {\n        console.assert(v === true || v === false)\n        if (v) {\n            this.inputElem.removeAttribute('disabled')\n            this.inputElem.focus()\n        } else {\n            this.inputElem.setAttribute('disabled', '')\n            this.inputElem.value = ''\n            this.inputBuf = ''\n        }        \n    }\n\n    getInputBuf() {\n        return this.inputBuf\n    }\n\n    _linefeed() {\n        for (let i=0; i<24; i++) {\n            this.lines[i] = this.lines[i+1]\n        }\n        this.lines[24] = []\n    }\n\n    _rendertext() {\n        for (let y=0; y<25; y++) {\n            const line = this.lines[y]\n            let el = document.querySelector(`#console [data-y=\"${y}\"]`)\n            for (let x=0; x<80; x++) {\n                el.innerText = line[x] || ' '\n                el = el.nextSibling\n            }\n        }\n    }\n\n    print(s) {\n        const numlines = Math.ceil(s.length / 80)\n        for (let i=0, j=0; i<numlines; i++, j+=80) {\n            this._linefeed()\n            this.lines[24] = s.slice(j, j + Math.min(80, s.length - j))\n        }\n        this._rendertext()\n    }\n}\n\nmodule.exports = Console\n", "class IO {\n    constructor(con) {\n        this.con = con\n        this.buf = ''\n    }\n\n    putch(ch) {\n        if (ch == 10) {\n            this.con.print(this.buf)\n            this.buf = ''\n            return\n        }\n        this.buf += String.fromCharCode(ch)\n    }\n\n    setExpectingInput(v) {\n        this.con.setExpectingInput(v)\n    }\n\n    getInputBuf() {\n        return this.con.getInputBuf()\n    }\n}\n\nmodule.exports = IO\n", "class Memory {\n    constructor(u8array) {\n        this.dv = new DataView(u8array.buffer)\n    }\n    read(addr) {\n        return this.dv.getUint16(addr << 1, true)\n    }\n    write(addr, v) {\n        this.dv.setUint16(addr << 1, v, true)\n    }\n}\n\n\nmodule.exports = Memory\n", "class Stack {\n    constructor() {\n        const buf = new ArrayBuffer(1_048_576)\n        this.dv = new DataView(buf)\n        this.byteSP = 0\n    }\n    push(v) {\n        if (this.byteSP == this.dv.byteLength) {\n            throw RangeError('stack overflow')\n        }\n        this.dv.setUint16(this.byteSP, v, true)\n        this.byteSP += 2\n    }\n    pop(v) {\n        if (this.byteSP === 0) {\n            throw RangeError('stack underflow')\n        }\n        this.byteSP -= 2\n        return this.dv.getUint16(this.byteSP, true)\n    }\n}\n\nmodule.exports = Stack\n", "const OP_HALT = 0\nconst OP_SET = 1\nconst OP_PUSH = 2\nconst OP_POP = 3\nconst OP_EQ = 4\nconst OP_GT = 5\nconst OP_JMP = 6\nconst OP_JT = 7\nconst OP_JF = 8\nconst OP_ADD = 9\nconst OP_MULT = 10\nconst OP_MOD = 11\nconst OP_AND = 12\nconst OP_OR = 13\nconst OP_NOT = 14\nconst OP_RMEM = 15\nconst OP_WMEM = 16\nconst OP_CALL = 17\nconst OP_RET = 18\nconst OP_OUT = 19\nconst OP_IN = 20\nconst OP_NOP = 21\n\nconst OPCODES = {\n    OP_HALT,\n    OP_SET,\n    OP_PUSH,\n    OP_POP,\n    OP_EQ,\n    OP_GT,\n    OP_JMP,\n    OP_JT,\n    OP_JF,\n    OP_ADD,\n    OP_MULT,\n    OP_MOD,\n    OP_AND,\n    OP_OR,\n    OP_NOT,\n    OP_RMEM,\n    OP_WMEM,\n    OP_CALL,\n    OP_RET,\n    OP_OUT,\n    OP_IN,\n    OP_NOP\n}\n\nconst ARGCOUNTS = {\n    OP_HALT: 0,\n    OP_SET: 2,\n    OP_PUSH: 1,\n    OP_POP: 1,\n    OP_EQ: 3,\n    OP_GT: 3,\n    OP_JMP: 1,\n    OP_JT: 2,\n    OP_JF: 2,\n    OP_ADD: 3,\n    OP_MULT: 3,\n    OP_MOD: 3,\n    OP_AND: 3,\n    OP_OR: 3,\n    OP_NOT: 2,\n    OP_RMEM: 2,\n    OP_WMEM: 2,\n    OP_CALL: 1,\n    OP_RET: 0,\n    OP_OUT: 1,\n    OP_IN: 1,\n    OP_NOP: 0\n}\n\n\nmodule.exports = {OPCODES, ARGCOUNTS}\n", "const { OPCODES, ARGCOUNTS } = require('./opcodes')\n\nconst {\n    OP_HALT,\n    OP_SET,\n    OP_PUSH,\n    OP_POP,\n    OP_EQ,\n    OP_GT,\n    OP_JMP,\n    OP_JT,\n    OP_JF,\n    OP_ADD,\n    OP_MULT,\n    OP_MOD,\n    OP_AND,\n    OP_OR,\n    OP_NOT,\n    OP_RMEM,\n    OP_WMEM,\n    OP_CALL,\n    OP_RET,\n    OP_OUT,\n    OP_IN,\n    OP_NOP\n} = OPCODES\n\n\nclass VM {\n    constructor(mem, stk, io) {\n        this.mem = mem\n        this.stk = stk\n        this.io = io\n        this.ip = 0\n        this.reg = [0, 0, 0, 0, 0, 0, 0, 0]\n        this.isHalted = false\n        this.isExpectingInput = false\n        this.inputBuf = null\n        this._disasmMode = false\n    }\n\n    _reg(v) {\n        console.assert(v & 0x8000)\n        const r = v & 0x7fff\n        if (r > 7) {\n            throw RangeError('register out of range 0..7')\n        }\n        return r\n    }\n\n    _nextw() {\n        const v = this.mem.read(this.ip)\n        this.ip++\n        if (v & 0x8000) {\n            return {'reg': this._reg(v)}\n        }\n        return {'val': v}\n    }\n\n    _unpackw(w) {\n        if (w.reg !== undefined) {\n            return this.reg[w.reg]\n        }\n        return w.val\n    }\n\n    _unpacknextw(count) {\n        if (count === undefined) {\n            return this._unpackw(this._nextw())\n        }\n        const words = []\n        for (let i=0; i<count; i++) {\n            words.push(this._unpackw(this._nextw()))\n        }\n        return words\n    }\n\n    _unpackwrite(dest, v) {\n        if (dest.reg !== undefined) {\n            this.reg[dest.reg] = v\n        } else {\n            this.mem.write(dest.val, v)\n        }\n    }\n\n    _op_halt() { this.isHalted = true }\n\n    _op_set() { \n        this._unpackwrite(this._nextw(), this._unpacknextw())\n    }\n\n    _op_push() { this.stk.push(this._unpacknextw()) }\n\n    _op_pop() { this._unpackwrite(this._nextw(), this.stk.pop()) }\n\n    _op_eq() {\n        this._unpackwrite(\n            this._nextw(),\n            (\n                this._unpacknextw() === this._unpacknextw()\n                ? 1\n                : 0\n            )\n        )\n    }\n\n    _op_gt() {\n        this._unpackwrite(\n            this._nextw(),\n            (\n                this._unpacknextw() > this._unpacknextw()\n                ? 1\n                : 0\n            )\n        )\n    }\n\n    _op_jmp() { this.ip = this._unpacknextw() }\n\n    _op_jt() {\n        const [a, b] = this._unpacknextw(2)\n        if (a !== 0) {\n            this.ip = b\n        }\n    }\n\n    _op_jf() {\n        const [a, b] = this._unpacknextw(2)\n        if (a === 0) {\n            this.ip = b\n        }\n    }\n\n    _op_add() {\n        const a = this._nextw()\n        const [b, c] = this._unpacknextw(2)\n        this._unpackwrite(a, (b + c) & 0x7fff)\n    }\n\n    _op_mult() {\n        const a = this._nextw()\n        const [b, c] = this._unpacknextw(2)\n        this._unpackwrite(a, (b * c) & 0x7fff)\n    }\n\n    _op_mod() {\n        const a = this._nextw()\n        const [b, c] = this._unpacknextw(2)\n        this._unpackwrite(a, b % c)\n    }\n\n    _op_and() {\n        const a = this._nextw()\n        const [b, c] = this._unpacknextw(2)\n        this._unpackwrite(a, b & c)\n    }\n\n    _op_or() {\n        const a = this._nextw()\n        const [b, c] = this._unpacknextw(2)\n        this._unpackwrite(a, b | c)\n    }\n\n    _op_not() { this._unpackwrite(this._nextw(), ~this._unpacknextw() & 0x7fff) }\n\n    _op_rmem() { this._unpackwrite(this._nextw(), this.mem.read(this._unpacknextw())) }\n\n    _op_wmem() {\n        this.mem.write(this._unpacknextw(), this._unpacknextw())\n    }\n\n    _op_call() {\n        const a = this._unpacknextw()\n        this.stk.push(this.ip)\n        this.ip = a\n    }\n\n    _op_ret() {\n        try {\n            this.ip = this.stk.pop()\n        } catch {\n            this.isHalted = true\n        }\n    }\n\n    _op_out() { this.io.putch(this._unpacknextw()) }\n\n    _op_inp() {\n        if (!this.inputBuf) {\n            this.io.setExpectingInput(true)\n            this.isExpectingInput = true\n            this.ip--\n            return\n        }\n        this.io.putch(this.inputBuf.charCodeAt(0))\n        this._unpackwrite(this._nextw(), this.inputBuf.charCodeAt(0))\n        this.inputBuf = this.inputBuf.slice(1)\n    }\n\n    _exec(opc) {\n        switch(opc) {\n            case OP_HALT:\n                this._op_halt()\n                break\n            case OP_SET:\n                this._op_set()\n                break\n            case OP_PUSH:\n                this._op_push()\n                break\n            case OP_POP:\n                this._op_pop()\n                break\n            case OP_EQ:\n                this._op_eq()\n                break\n            case OP_GT:\n                this._op_gt()\n                break\n            case OP_JMP:\n                this._op_jmp()\n                break\n            case OP_JT:\n                this._op_jt()\n                break\n            case OP_JF:\n                this._op_jf()\n                break\n            case OP_ADD:\n                this._op_add()\n                break\n            case OP_MULT:\n                this._op_mult()\n                break\n            case OP_MOD:\n                this._op_mod()\n                break\n            case OP_AND:\n                this._op_and()\n                break\n            case OP_OR:\n                this._op_or()\n                break\n            case OP_NOT:\n                this._op_not()\n                break\n            case OP_RMEM:\n                this._op_rmem()\n                break\n            case OP_WMEM:\n                this._op_wmem()\n                break\n            case OP_CALL:\n                this._op_call()\n                break\n            case OP_RET:\n                this._op_ret()\n                break\n            case OP_OUT:\n                this._op_out()\n                break\n            case OP_IN:\n                this._op_inp()\n                break\n            case OP_NOP:\n                break\n        }\n    }\n\n    _printdisasmline(s) {\n        console.log(s.trim())\n    }\n\n    _showdisasmarg(opc, addr) {\n        const v = this.mem.read(addr)\n\n        if (opc == OP_OUT) {\n            return v == 10 ? 'newline' : `'${String.fromCharCode(v)}'`\n        }\n\n        if (v & 0x8000) {\n            const r = this._reg(v)\n            return `r${r}`\n        }\n        return v.toString(16).padStart(4, '0')\n    }\n\n    _showdisasmargs(opc, n) {\n        const args = []\n        for (let i=0; i<n; i++) {\n            args.push(this._showdisasmarg(opc, this.ip + i))\n        }\n        return args.join(', ')\n    }\n\n    _showdisasmregs() {\n        return this.reg.map((r) => r.toString(16).padStart(4, '0')).join(' | ')\n    }\n\n    _exec_withdisasm(opc) {\n        const instrAddr = this.ip - 1\n        const byteAddr = instrAddr << 1\n        const opcodeKey = Object.keys(OPCODES)[ Object.values(OPCODES).indexOf(opc) ] \n        const mnem = opcodeKey.slice(3)\n        let s = `${instrAddr.toString(16).padStart(4, '0')} [${byteAddr.toString(16).padStart(4, '0')}]  ${mnem.padEnd(4)} `\n        s += this._showdisasmargs(opc, ARGCOUNTS[opcodeKey])\n        s = s.padEnd(36) + this._showdisasmregs()        \n        this._printdisasmline(s)\n        switch(opc) {\n            case OP_HALT:\n                this._op_halt()\n                break\n            case OP_SET:\n                this._op_set()\n                break\n            case OP_PUSH:\n                this._op_push()\n                break\n            case OP_POP:\n                this._op_pop()\n                break\n            case OP_EQ:\n                this._op_eq()\n                break\n            case OP_GT:\n                this._op_gt()\n                break\n            case OP_JMP:\n                this._op_jmp()\n                break\n            case OP_JT:\n                this._op_jt()\n                break\n            case OP_JF:\n                this._op_jf()\n                break\n            case OP_ADD:\n                this._op_add()\n                break\n            case OP_MULT:\n                this._op_mult()\n                break\n            case OP_MOD:\n                this._op_mod()\n                break\n            case OP_AND:\n                this._op_and()\n                break\n            case OP_OR:\n                this._op_or()\n                break\n            case OP_NOT:\n                this._op_not()\n                break\n            case OP_RMEM:\n                this._op_rmem()\n                break\n            case OP_WMEM:\n                this._op_wmem()\n                break\n            case OP_CALL:\n                this._op_call()\n                break\n            case OP_RET:\n                this._op_ret()\n                break\n            case OP_OUT:\n                this._op_out()\n                break\n            case OP_IN:\n                this._op_inp()\n            case OP_NOP:\n                break\n        }\n    }\n\n    step() {\n        if (this.isHalted)\n            return\n\n        if (this.isExpectingInput) {\n            const buf = this.io.getInputBuf()\n            if (buf) {                \n                this.io.setExpectingInput(false)\n                this.inputBuf = buf\n                this.isExpectingInput = false\n                this.io.putch('>'.charCodeAt(0))\n                this.io.putch(' '.charCodeAt(0))\n            }\n            return\n        }\n\n        const opc = this.mem.read(this.ip)\n        this.ip++\n\n        if (this._disasmMode) {\n            this._exec_withdisasm(opc)\n        } else {\n            this._exec(opc)\n        }\n    }\n\n    serializeState() {\n        return {\n            \n        }\n    }\n}\n\nmodule.exports = VM\n", "(async function () {\n\n    const Console = require('./console')\n    const con = new Console(document.getElementById('console'))\n    const IO = require('./io')\n\n    // const localforage = require('localforage')\n    const challengeBin = require('./challenge.bin')\n    const Memory = require('./memory.js')\n    const Stack = require('./stack.js')\n    const VM = require('./vm.js')\n\n    const vm = new VM(new Memory(challengeBin), new Stack(), new IO(con))\n\n    const STEPS_PER_TIMESLICE = 10000\n    const TIMEOUT = 0\n    const timeslice = () => {\n        for (let i=0; i<STEPS_PER_TIMESLICE; i++) {\n            vm.step()\n        }\n        if (!vm.isHalted) {\n            window.setTimeout(timeslice, TIMEOUT)\n        }\n    }\n    window.setTimeout(timeslice, TIMEOUT)\n\n})().catch(err => {\n    console.log(err)\n})\n"],
  "mappings": "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",
  "names": []
}
