(() => {
  var __commonJS = (callback, module) => () => {
    if (!module) {
      module = {exports: {}};
      callback(module.exports, module);
    }
    return module.exports;
  };
  var __toBinary = false ? (base64) => new Uint8Array(Buffer.from(base64, "base64")) : /* @__PURE__ */ (() => {
    var table = new Uint8Array(128);
    for (var i = 0; i < 64; i++)
      table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
    return (base64) => {
      var n = base64.length, bytes = new Uint8Array((n - (base64[n - 1] == "=") - (base64[n - 2] == "=")) * 3 / 4 | 0);
      for (var i2 = 0, j = 0; i2 < n; ) {
        var c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
        var c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
        bytes[j++] = c0 << 2 | c1 >> 4;
        bytes[j++] = c1 << 4 | c2 >> 2;
        bytes[j++] = c2 << 6 | c3;
      }
      return bytes;
    };
  })();

  // console.js
  var require_console = __commonJS((exports, module) => {
    var Console = class {
      constructor(el) {
        this.lines = new Array(25);
        this.inputBuf = "";
        this.inputElem = null;
        for (let y = 0; y < 25; y++) {
          this.lines[y] = [];
        }
        this.build(el);
      }
      build(el) {
        el.setAttribute("style", "display: inline-block; font-family: monospace; font-size: 16px;background-color: #ccc;");
        for (let y = 0; y < 25; y++) {
          const row = document.createElement("div");
          for (let x = 0; x < 80; x++) {
            const col = document.createElement("div");
            col.setAttribute("style", `display: inline-block; width: 10px; height: 24px;text-align: center; vertical-align: middle;`);
            col.setAttribute("data-x", x);
            col.setAttribute("data-y", y);
            row.appendChild(col);
          }
          el.appendChild(row);
        }
        const inp = document.createElement("input");
        inp.setAttribute("type", "text");
        inp.setAttribute("style", "width: calc(100% - 5px); font-family: monospace; font-size: 16px; margin: 0; border: 0; padding-left: 3px; background-color: #ace");
        inp.setAttribute("autofocus", "");
        inp.setAttribute("disabled", "");
        inp.addEventListener("keyup", this._keyUpHandler.bind(this));
        el.appendChild(inp);
        this.inputElem = inp;
      }
      _keyUpHandler(ev) {
        if (ev.code === "Enter") {
          this.inputBuf = ev.target.value + String.fromCharCode(10);
        }
      }
      setExpectingInput(v) {
        console.assert(v === true || v === false);
        if (v) {
          this.inputElem.removeAttribute("disabled");
          this.inputElem.focus();
        } else {
          this.inputElem.setAttribute("disabled", "");
          this.inputElem.value = "";
          this.inputBuf = "";
        }
      }
      getInputBuf() {
        return this.inputBuf;
      }
      _linefeed() {
        for (let i = 0; i < 24; i++) {
          this.lines[i] = this.lines[i + 1];
        }
        this.lines[24] = [];
      }
      _rendertext() {
        for (let y = 0; y < 25; y++) {
          const line = this.lines[y];
          let el = document.querySelector(`#console [data-y="${y}"]`);
          for (let x = 0; x < 80; x++) {
            el.innerText = line[x] || " ";
            el = el.nextSibling;
          }
        }
      }
      print(s) {
        const numlines = Math.ceil(s.length / 80);
        for (let i = 0, j = 0; i < numlines; i++, j += 80) {
          this._linefeed();
          this.lines[24] = s.slice(j, j + Math.min(80, s.length - j));
        }
        this._rendertext();
      }
    };
    module.exports = Console;
  });

  // io.js
  var require_io = __commonJS((exports, module) => {
    var IO = class {
      constructor(con) {
        this.con = con;
        this.buf = "";
      }
      putch(ch) {
        if (ch == 10) {
          this.con.print(this.buf);
          this.buf = "";
          return;
        }
        this.buf += String.fromCharCode(ch);
      }
      setExpectingInput(v) {
        this.con.setExpectingInput(v);
      }
      getInputBuf() {
        return this.con.getInputBuf();
      }
    };
    module.exports = IO;
  });

  // challenge.bin
  var require_challenge = __commonJS((exports, module) => {
    module.exports = __toBinary("");
  });

  // memory.js
  var require_memory = __commonJS((exports, module) => {
    var Memory = class {
      constructor(u8array) {
        this.dv = new DataView(u8array.buffer);
      }
      read(addr) {
        return this.dv.getUint16(addr << 1, true);
      }
      write(addr, v) {
        this.dv.setUint16(addr << 1, v, true);
      }
    };
    module.exports = Memory;
  });

  // stack.js
  var require_stack = __commonJS((exports, module) => {
    var Stack = class {
      constructor() {
        const buf = new ArrayBuffer(1048576);
        this.dv = new DataView(buf);
        this.byteSP = 0;
      }
      push(v) {
        if (this.byteSP == this.dv.byteLength) {
          throw RangeError("stack overflow");
        }
        this.dv.setUint16(this.byteSP, v, true);
        this.byteSP += 2;
      }
      pop(v) {
        if (this.byteSP === 0) {
          throw RangeError("stack underflow");
        }
        this.byteSP -= 2;
        return this.dv.getUint16(this.byteSP, true);
      }
    };
    module.exports = Stack;
  });

  // opcodes.js
  var require_opcodes = __commonJS((exports, module) => {
    var OP_HALT = 0;
    var OP_SET = 1;
    var OP_PUSH = 2;
    var OP_POP = 3;
    var OP_EQ = 4;
    var OP_GT = 5;
    var OP_JMP = 6;
    var OP_JT = 7;
    var OP_JF = 8;
    var OP_ADD = 9;
    var OP_MULT = 10;
    var OP_MOD = 11;
    var OP_AND = 12;
    var OP_OR = 13;
    var OP_NOT = 14;
    var OP_RMEM = 15;
    var OP_WMEM = 16;
    var OP_CALL = 17;
    var OP_RET = 18;
    var OP_OUT = 19;
    var OP_IN = 20;
    var OP_NOP = 21;
    var OPCODES = {
      OP_HALT,
      OP_SET,
      OP_PUSH,
      OP_POP,
      OP_EQ,
      OP_GT,
      OP_JMP,
      OP_JT,
      OP_JF,
      OP_ADD,
      OP_MULT,
      OP_MOD,
      OP_AND,
      OP_OR,
      OP_NOT,
      OP_RMEM,
      OP_WMEM,
      OP_CALL,
      OP_RET,
      OP_OUT,
      OP_IN,
      OP_NOP
    };
    var ARGCOUNTS = {
      OP_HALT: 0,
      OP_SET: 2,
      OP_PUSH: 1,
      OP_POP: 1,
      OP_EQ: 3,
      OP_GT: 3,
      OP_JMP: 1,
      OP_JT: 2,
      OP_JF: 2,
      OP_ADD: 3,
      OP_MULT: 3,
      OP_MOD: 3,
      OP_AND: 3,
      OP_OR: 3,
      OP_NOT: 2,
      OP_RMEM: 2,
      OP_WMEM: 2,
      OP_CALL: 1,
      OP_RET: 0,
      OP_OUT: 1,
      OP_IN: 1,
      OP_NOP: 0
    };
    module.exports = {OPCODES, ARGCOUNTS};
  });

  // vm.js
  var require_vm = __commonJS((exports, module) => {
    var {OPCODES, ARGCOUNTS} = require_opcodes();
    var {
      OP_HALT,
      OP_SET,
      OP_PUSH,
      OP_POP,
      OP_EQ,
      OP_GT,
      OP_JMP,
      OP_JT,
      OP_JF,
      OP_ADD,
      OP_MULT,
      OP_MOD,
      OP_AND,
      OP_OR,
      OP_NOT,
      OP_RMEM,
      OP_WMEM,
      OP_CALL,
      OP_RET,
      OP_OUT,
      OP_IN,
      OP_NOP
    } = OPCODES;
    var VM = class {
      constructor(mem, stk, io) {
        this.mem = mem;
        this.stk = stk;
        this.io = io;
        this.ip = 0;
        this.reg = [0, 0, 0, 0, 0, 0, 0, 0];
        this.isHalted = false;
        this.isExpectingInput = false;
        this.inputBuf = null;
        this._disasmMode = false;
      }
      _reg(v) {
        console.assert(v & 32768);
        const r = v & 32767;
        if (r > 7) {
          throw RangeError("register out of range 0..7");
        }
        return r;
      }
      _nextw() {
        const v = this.mem.read(this.ip);
        this.ip++;
        if (v & 32768) {
          return {reg: this._reg(v)};
        }
        return {val: v};
      }
      _unpackw(w) {
        if (w.reg !== void 0) {
          return this.reg[w.reg];
        }
        return w.val;
      }
      _unpacknextw(count) {
        if (count === void 0) {
          return this._unpackw(this._nextw());
        }
        const words = [];
        for (let i = 0; i < count; i++) {
          words.push(this._unpackw(this._nextw()));
        }
        return words;
      }
      _unpackwrite(dest, v) {
        if (dest.reg !== void 0) {
          this.reg[dest.reg] = v;
        } else {
          this.mem.write(dest.val, v);
        }
      }
      _op_halt() {
        this.isHalted = true;
      }
      _op_set() {
        this._unpackwrite(this._nextw(), this._unpacknextw());
      }
      _op_push() {
        this.stk.push(this._unpacknextw());
      }
      _op_pop() {
        this._unpackwrite(this._nextw(), this.stk.pop());
      }
      _op_eq() {
        this._unpackwrite(this._nextw(), this._unpacknextw() === this._unpacknextw() ? 1 : 0);
      }
      _op_gt() {
        this._unpackwrite(this._nextw(), this._unpacknextw() > this._unpacknextw() ? 1 : 0);
      }
      _op_jmp() {
        this.ip = this._unpacknextw();
      }
      _op_jt() {
        const [a, b] = this._unpacknextw(2);
        if (a !== 0) {
          this.ip = b;
        }
      }
      _op_jf() {
        const [a, b] = this._unpacknextw(2);
        if (a === 0) {
          this.ip = b;
        }
      }
      _op_add() {
        const a = this._nextw();
        const [b, c] = this._unpacknextw(2);
        this._unpackwrite(a, b + c & 32767);
      }
      _op_mult() {
        const a = this._nextw();
        const [b, c] = this._unpacknextw(2);
        this._unpackwrite(a, b * c & 32767);
      }
      _op_mod() {
        const a = this._nextw();
        const [b, c] = this._unpacknextw(2);
        this._unpackwrite(a, b % c);
      }
      _op_and() {
        const a = this._nextw();
        const [b, c] = this._unpacknextw(2);
        this._unpackwrite(a, b & c);
      }
      _op_or() {
        const a = this._nextw();
        const [b, c] = this._unpacknextw(2);
        this._unpackwrite(a, b | c);
      }
      _op_not() {
        this._unpackwrite(this._nextw(), ~this._unpacknextw() & 32767);
      }
      _op_rmem() {
        this._unpackwrite(this._nextw(), this.mem.read(this._unpacknextw()));
      }
      _op_wmem() {
        this.mem.write(this._unpacknextw(), this._unpacknextw());
      }
      _op_call() {
        const a = this._unpacknextw();
        this.stk.push(this.ip);
        this.ip = a;
      }
      _op_ret() {
        try {
          this.ip = this.stk.pop();
        } catch {
          this.isHalted = true;
        }
      }
      _op_out() {
        this.io.putch(this._unpacknextw());
      }
      _op_inp() {
        if (!this.inputBuf) {
          this.io.setExpectingInput(true);
          this.isExpectingInput = true;
          this.ip--;
          return;
        }
        this.io.putch(this.inputBuf.charCodeAt(0));
        this._unpackwrite(this._nextw(), this.inputBuf.charCodeAt(0));
        this.inputBuf = this.inputBuf.slice(1);
      }
      _exec(opc) {
        switch (opc) {
          case OP_HALT:
            this._op_halt();
            break;
          case OP_SET:
            this._op_set();
            break;
          case OP_PUSH:
            this._op_push();
            break;
          case OP_POP:
            this._op_pop();
            break;
          case OP_EQ:
            this._op_eq();
            break;
          case OP_GT:
            this._op_gt();
            break;
          case OP_JMP:
            this._op_jmp();
            break;
          case OP_JT:
            this._op_jt();
            break;
          case OP_JF:
            this._op_jf();
            break;
          case OP_ADD:
            this._op_add();
            break;
          case OP_MULT:
            this._op_mult();
            break;
          case OP_MOD:
            this._op_mod();
            break;
          case OP_AND:
            this._op_and();
            break;
          case OP_OR:
            this._op_or();
            break;
          case OP_NOT:
            this._op_not();
            break;
          case OP_RMEM:
            this._op_rmem();
            break;
          case OP_WMEM:
            this._op_wmem();
            break;
          case OP_CALL:
            this._op_call();
            break;
          case OP_RET:
            this._op_ret();
            break;
          case OP_OUT:
            this._op_out();
            break;
          case OP_IN:
            this._op_inp();
            break;
          case OP_NOP:
            break;
        }
      }
      _printdisasmline(s) {
        console.log(s.trim());
      }
      _showdisasmarg(opc, addr) {
        const v = this.mem.read(addr);
        if (opc == OP_OUT) {
          return v == 10 ? "newline" : `'${String.fromCharCode(v)}'`;
        }
        if (v & 32768) {
          const r = this._reg(v);
          return `r${r}`;
        }
        return v.toString(16).padStart(4, "0");
      }
      _showdisasmargs(opc, n) {
        const args = [];
        for (let i = 0; i < n; i++) {
          args.push(this._showdisasmarg(opc, this.ip + i));
        }
        return args.join(", ");
      }
      _showdisasmregs() {
        return this.reg.map((r) => r.toString(16).padStart(4, "0")).join(" | ");
      }
      _exec_withdisasm(opc) {
        const instrAddr = this.ip - 1;
        const byteAddr = instrAddr << 1;
        const opcodeKey = Object.keys(OPCODES)[Object.values(OPCODES).indexOf(opc)];
        const mnem = opcodeKey.slice(3);
        let s = `${instrAddr.toString(16).padStart(4, "0")} [${byteAddr.toString(16).padStart(4, "0")}]  ${mnem.padEnd(4)} `;
        s += this._showdisasmargs(opc, ARGCOUNTS[opcodeKey]);
        s = s.padEnd(36) + this._showdisasmregs();
        this._printdisasmline(s);
        switch (opc) {
          case OP_HALT:
            this._op_halt();
            break;
          case OP_SET:
            this._op_set();
            break;
          case OP_PUSH:
            this._op_push();
            break;
          case OP_POP:
            this._op_pop();
            break;
          case OP_EQ:
            this._op_eq();
            break;
          case OP_GT:
            this._op_gt();
            break;
          case OP_JMP:
            this._op_jmp();
            break;
          case OP_JT:
            this._op_jt();
            break;
          case OP_JF:
            this._op_jf();
            break;
          case OP_ADD:
            this._op_add();
            break;
          case OP_MULT:
            this._op_mult();
            break;
          case OP_MOD:
            this._op_mod();
            break;
          case OP_AND:
            this._op_and();
            break;
          case OP_OR:
            this._op_or();
            break;
          case OP_NOT:
            this._op_not();
            break;
          case OP_RMEM:
            this._op_rmem();
            break;
          case OP_WMEM:
            this._op_wmem();
            break;
          case OP_CALL:
            this._op_call();
            break;
          case OP_RET:
            this._op_ret();
            break;
          case OP_OUT:
            this._op_out();
            break;
          case OP_IN:
            this._op_inp();
          case OP_NOP:
            break;
        }
      }
      step() {
        if (this.isHalted)
          return;
        if (this.isExpectingInput) {
          const buf = this.io.getInputBuf();
          if (buf) {
            this.io.setExpectingInput(false);
            this.inputBuf = buf;
            this.isExpectingInput = false;
            this.io.putch(">".charCodeAt(0));
            this.io.putch(" ".charCodeAt(0));
          }
          return;
        }
        const opc = this.mem.read(this.ip);
        this.ip++;
        if (this._disasmMode) {
          this._exec_withdisasm(opc);
        } else {
          this._exec(opc);
        }
      }
      serializeState() {
        return {};
      }
    };
    module.exports = VM;
  });

  // app.js
  (async function() {
    const Console = require_console();
    const con = new Console(document.getElementById("console"));
    const IO = require_io();
    const challengeBin = require_challenge();
    const Memory = require_memory();
    const Stack = require_stack();
    const VM = require_vm();
    const vm = new VM(new Memory(challengeBin), new Stack(), new IO(con));
    const STEPS_PER_TIMESLICE = 1e4;
    const TIMEOUT = 0;
    const timeslice = () => {
      for (let i = 0; i < STEPS_PER_TIMESLICE; i++) {
        vm.step();
      }
      if (!vm.isHalted) {
        window.setTimeout(timeslice, TIMEOUT);
      }
    };
    window.setTimeout(timeslice, TIMEOUT);
  })().catch((err) => {
    console.log(err);
  });
})();
//# sourceMappingURL=app.js.map
